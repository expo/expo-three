{"version":3,"file":"loadModelsAsync.js","sourceRoot":"","sources":["../../src/loaders/loadModelsAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import AssetUtils from 'expo-asset-utils';\nimport { Platform } from 'react-native';\nimport { FileLoader } from 'three';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\n\nimport readAsStringAsync from './readAsStringAsync';\n\nasync function loadFileAsync({ asset, funcName }): Promise<string | null> {\n  if (!asset) {\n    throw new Error(`ExpoTHREE.${funcName}: Cannot parse a null asset`);\n  }\n  return await AssetUtils.uriAsync(asset);\n}\n\nexport async function loadGLTFAsync(options) {\n  const { asset, onAssetRequested, } = options;\n  const uri = await loadFileAsync({\n      asset,\n      funcName: 'loadGLTFAsync',\n  });\n  if (!uri)\n      return;\n  const loader = new GLTFLoader();\n  // loader.setCrossOrigin('anonymous');\n  if (onAssetRequested) {\n      loader.setPath(onAssetRequested);\n  }\n  if (Platform.OS === 'web') {\n      return await new Promise((resolve, reject) => loader.load(asset, resolve, () => { }, reject));\n  }\n  return await loadFileContentsAsync(loader, asset, 'loadGLTFAsync');\n}\n\nexport async function loadMtlAsync({ asset, onAssetRequested }): Promise<any> {\n  const uri = await loadFileAsync({\n    asset,\n    funcName: 'loadMtlAsync',\n  });\n  if (!uri) return;\n\n  const loader = new MTLLoader();\n  loader.setPath(onAssetRequested);\n\n  if (Platform.OS === 'web') {\n    return await new Promise((resolve, reject) =>\n      loader.load(uri, resolve, () => {}, reject)\n    );\n  }\n\n  return loadFileContentsAsync(loader, uri, 'loadMtlAsync');\n}\n\nexport async function loadObjAsync(options: {\n  asset: any;\n  onAssetRequested?: (...args: any[]) => any;\n  onMtlAssetRequested?: (...args: any[]) => any;\n  mtlAsset?: any;\n  materials?: any;\n}): Promise<any> {\n  const {\n    asset,\n    onAssetRequested,\n    onMtlAssetRequested,\n    mtlAsset,\n    materials,\n  } = options;\n  let nextMaterials = materials;\n  if (nextMaterials == null && mtlAsset != null) {\n    nextMaterials = await loadMtlAsync({\n      asset: mtlAsset,\n      onAssetRequested: onMtlAssetRequested || onAssetRequested,\n    });\n    nextMaterials.preload();\n  }\n\n  const uri = await loadFileAsync({\n    asset,\n    funcName: 'loadObjAsync',\n  });\n  if (!uri) return;\n\n  const loader = new OBJLoader();\n  if (onAssetRequested) {\n    loader.setPath(onAssetRequested as any);\n  }\n  if (nextMaterials != null) {\n    loader.setMaterials(nextMaterials);\n  }\n\n  if (Platform.OS === 'web') {\n    return await new Promise((resolve, reject) =>\n      loader.load(uri, resolve, () => {}, reject)\n    );\n  }\n\n  return loadFileContentsAsync(loader, uri, 'loadObjAsync');\n}\n\nexport async function loadDaeAsync({\n  asset,\n  onAssetRequested,\n  onProgress,\n}): Promise<any> {\n  const uri = await loadFileAsync({\n    asset,\n    funcName: 'loadDaeAsync',\n  });\n  if (typeof uri !== 'string' || uri == null) {\n    return;\n  }\n\n  return new Promise((res, rej) =>\n    new FileLoader().load(\n      uri!,\n      text => {\n        // @ts-ignore\n        const loader = new ColladaLoader();\n        const parsedResult = (loader.parse as any)(text, onAssetRequested);\n        res(parsedResult);\n      },\n      onProgress,\n      rej\n    )\n  );\n}\n\nasync function loadFileContentsAsync(loader, uri, funcName): Promise<any> {\n  try {\n    const fileContents = await readAsStringAsync(uri);\n    return new Promise((res, rej) => loader.parse(fileContents, uri, res, rej));\n  } catch ({ message }) {\n    // Or model loader THREE.OBJLoader failed to parse fileContents\n    throw new Error(\n      `ExpoTHREE.${funcName}: Expo.FileSystem Failed to read uri: ${uri}. ${message}`\n    );\n  }\n}\n\nexport async function loadArrayBufferAsync({ uri, onProgress }): Promise<any> {\n  const loader = new FileLoader();\n  loader.setResponseType('arraybuffer');\n  return new Promise((res, rej) => loader.load(uri, res, onProgress, rej));\n}\n"]}